const TelegramBot = require('node-telegram-bot-api');
const puppeteer = require('puppeteer'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
const promisePool = require('./db');
const { setIntervalAsync } = require('set-interval-async/dynamic'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º set-interval-async
const cron = require('node-cron');//–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á

const token = '7097086634:AAFE4MUZgb0h-jHG0qyJAQ1RLOE-J6OMNaM';
const bot = new TelegramBot(token, { polling: true });

const TIMEZONE = "Europe/Moscow";
const TWO_DAYS = 2 * 24 * 60 * 60 * 1000;

let currentAction = {};

function sendHelp(chatId) {
  bot.sendMessage(chatId, '/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n/site - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç\n/creator - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º—è —Å–æ–∑–¥–∞—Ç–µ–ª—è\n/randomItem - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç\n/deleteItem - –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç\n/getItemByID - –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç –ø–æ ID\n!qr - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å QR-–∫–æ–¥\n!webscr - –°–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞');
}

function sendSite(chatId) {
  bot.sendMessage(chatId, '–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç: https://students.forus.ru/');
}

function sendCreator(chatId) {
  bot.sendMessage(chatId, '–°–æ–∑–¥–∞—Ç–µ–ª—å –±–æ—Ç–∞: –ü–∏–Ω—á—É–∫ –ö–∏—Ä–∏–ª–ª');
}

function getRandomItem(chatId) {
  promisePool.execute('SELECT * FROM Items ORDER BY RAND() LIMIT 1')
    .then(([rows]) => {
      const item = rows[0];
      bot.sendMessage(chatId, `(${item.id}) - ${item.name}: ${item.desc}`);
    })
    .catch((err) => {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å —Å–ª—É—á–∞–π–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç');
    });
}

async function updateUserLastMessage(userId) {
  const today = new Date().toISOString().split('T')[0];
  await promisePool.execute('INSERT INTO Users (id, lastMessage) VALUES (?, ?) ON DUPLICATE KEY UPDATE lastMessage = ?', [userId, today, today]);
}

function deleteItem(chatId, itemId) {
  promisePool.execute('DELETE FROM Items WHERE id = ?', [itemId])
    .then(([result]) => {
      if (result.affectedRows == 0) {
        bot.sendMessage(chatId, '–ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
      } else {
        bot.sendMessage(chatId, '–ü—Ä–µ–¥–º–µ—Ç —É–¥–∞–ª—ë–Ω —É—Å–ø–µ—à–Ω–æ!');
      }
    })
    .catch((err) => {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç');
    });
}

function getItemByID(chatId, itemId) {
  promisePool.execute('SELECT * FROM Items WHERE id = ?', [itemId])
    .then(([rows]) => {
      if (rows.length == 0) {
        bot.sendMessage(chatId, '–ü—Ä–µ–¥–º–µ—Ç —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω');
      } else {
        const item = rows[0];
        bot.sendMessage(chatId, `(${item.id}) - ${item.name}: ${item.desc}`);
      }
    })
    .catch((err) => {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–µ—Ç—Å—è –∏–∑–≤–ª–µ—á—å —ç–ª–µ–º–µ–Ω—Ç');
    });
}

//–≠—Ç–æ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
async function captureScreenshot(url) {
  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  await page.goto(url, { waitUntil: 'networkidle2' });
  const screenshotBuffer = await page.screenshot({ fullPage: true });
  await browser.close();
  return screenshotBuffer;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ —Å–∞–π—Ç–∞
bot.onText(/^\!webscr/, async function(msg) {
  var userId = msg.from.id;
  var url = msg.text.substring(8).trim();

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (url === "") {
    bot.sendMessage(msg.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.");
    return;
  }

  try {
    const screenshot = await captureScreenshot(url);
    bot.sendPhoto(msg.chat.id, screenshot, { caption: `üì∑ –°–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞: ${url}` });
  } catch (error) {
    bot.sendMessage(msg.chat.id, `–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–∞–π—Ç–∞ ${url}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ URL –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.`);
    console.error(error);
  }
});

bot.onText(/^\!qr/, function(msg) {
  var userId = msg.from.id;
  var data = msg.text.substring(3).trim();
  var uniqueParam = `&timestamp=${Date.now()}`;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  if (data === "") {
    bot.sendMessage(msg.chat.id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è QR-–∫–æ–¥–∞.");
    return;
  }

  var encodedData = encodeURIComponent(data);
  var imageqr = `https://api.qrserver.com/v1/create-qr-code/?size=250x250&data=${encodedData}${uniqueParam}`;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
  bot.sendPhoto(msg.chat.id, imageqr, { caption: `‚úèÔ∏è QR-–∫–æ–¥ –¥–ª—è: ${data}` });
});

bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, '–ü—Ä–∏–≤–µ—Ç, –æ–∫—Ç–∞–≥–æ–Ω!');
});

bot.onText(/\/help/, (msg) => {
  sendHelp(msg.chat.id);
});

bot.onText(/\/site/, (msg) => {
  sendSite(msg.chat.id);
});

bot.onText(/\/creator/, (msg) => {
  sendCreator(msg.chat.id);
});

bot.onText(/\/randomItem/, (msg) => {
  getRandomItem(msg.chat.id);
});

bot.onText(/\/deleteItem/, (msg) => {
  bot.sendMessage(msg.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞');
  currentAction[msg.chat.id] = 'deleteItem';
});

bot.onText(/\/getItemByID/, (msg) => {
  bot.sendMessage(msg.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ ID –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞');
  currentAction[msg.chat.id] = 'getItemByID';
});

// –ë–ª–æ–∫ –¥–ª—è –ø—Ä–∏—ë–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–º ID, —á—Ç–æ–±—ã –Ω–µ –ø–∏—Å–∞—Ç—å –µ–≥–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –Ω–µ—É–¥–æ–±–Ω–æ
bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  await updateUserLastMessage(userId);

  if (!msg.text.startsWith('/')) {
    const action = currentAction[chatId];
    if (action === 'deleteItem') {
      deleteItem(chatId, msg.text);
      delete currentAction[chatId];
    } else if (action === 'getItemByID') {
      getItemByID(chatId, msg.text);
      delete currentAction[chatId];
    }
  }
});

// –¢–∞–π–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø–∏—Å–∞–ª–∏ –±–æ–ª–µ–µ 2—Ö —Å—É—Ç–æ–∫
cron.schedule('0 13 * * *', async () => {
  try {
	//–í–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É)
	//const [users] = await promisePool.execute('SELECT * FROM Users WHERE lastMessage < DATE_SUB(NOW(), INTERVAL 1 MINUTE)');
    
	const [users] = await promisePool.execute('SELECT * FROM Users WHERE lastMessage < DATE_SUB(NOW(), INTERVAL 2 DAY)');
    users.forEach((user) => {
      getRandomItem(user.id);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:', error);
  }
}, {
  timezone: TIMEZONE
});

console.log('Bot started...');